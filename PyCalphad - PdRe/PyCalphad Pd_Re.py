# -*- coding: utf-8 -*-
"""
Created on Thu Dec  5 20:33:24 2024

@author: nicol
"""

import os
import time
import matplotlib.pyplot as plt
import numpy as np
"""
MAKE SURE TO IMPORT ALL ADDITIONAL LIBRARIES AND MODULES YOU'LL NEED!
"""

# This line records the time at the beginning so we can track how long it took
# the code to run. This isn't really necessary in such simple code like this. 
# However, I do this as a force of habit, as it can significantly help with
# optimzing more complex code.
start_time = time.time()

# These lines change the working directory to where the .py file is saved. 
# This may not be necessary depending on how you have your environment
# configured, but I often do this so I know that any exported files will be 
# saved in the same folder as the .py file. I would also recommend that you 
# save a copy of the .tdb file in the same folder as the .py file before 
# trying to run your code.
abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

from pycalphad import Database, binplot
import pycalphad.variables as v

# Load database and choose the phases that will be considered
db_alzn = Database('Pd-Re_Complete2.tdb')  #Pd-Re_Complete  PD-RE_SKELETON
my_phases_pdre = ['LIQUID', 'FCC_A1', 'HCP_A3']

# Create a matplotlib Figure object and get the active Axes
fig = plt.figure(figsize=(9,6),dpi=800)
axes = fig.gca()

# Compute the phase diagram and plot it on the existing axes using the `plot_kwargs={'ax': axes}` keyword argument
binplot(db_alzn, ['PD', 'RE', 'VA'] , my_phases_pdre, {v.X('RE'):(0,1,0.02), v.T: (1000, 3475, 10), v.P:101325, v.N: 1}, plot_kwargs={'ax': axes})

# The code below is added by me so we can change the temperature axis units
# from K to °C. This will help significantly when comparing the phase diagram
# we calculated with the one in ASM's database.

# Get the axes from the figure generated by PyCalphad.
ax = plt.gca()

# Define the tick values to align with those in the ASM database so you can 
# more easily check your phase diagram against those in the literature.
ASM_ticks = np.linspace(1000,3200,8)
ASM_ticks_K = [T + 273.15 for T in ASM_ticks]

# Set custom tick values and labels on the plot.
ax.set_ylim(min(ASM_ticks_K),max(ASM_ticks_K))
ax.set_yticks(ASM_ticks_K)
ax.set_yticklabels([str(T) for T in ASM_ticks])
ax.set_yticklabels([f"{T:.0f}" for T in ASM_ticks])
ax.set_ylabel('Temperature (°C)')

plt.show()

# This let's us know how long it took to run the code.
print(f'Plotting the phase diagram took {time.time() - start_time:.2f} seconds.')